From ba68d1380957eabf607c3a8e887f75db6094b08e Mon Sep 17 00:00:00 2001
From: Robert Beckett <bob.beckett@collabora.com>
Date: Tue, 6 Feb 2024 18:52:43 +0000
Subject: [PATCH 30/36] Close the FB if possible to keep the image on the
 screen

Add a new optional active retain handler for renderer plugins.
Drm requires active behaviour to mark output images to be
retained and so can not just rely on lack of cleanup to retain
the splash.

Signed-off-by: Robert Beckett <bob.beckett@collabora.com>
---
 src/libply-splash-core/ply-device-manager.c  | 17 ++++++++++
 src/libply-splash-core/ply-device-manager.h  |  1 +
 src/libply-splash-core/ply-renderer-plugin.h |  1 +
 src/libply-splash-core/ply-renderer.c        |  7 ++++
 src/libply-splash-core/ply-renderer.h        |  1 +
 src/main.c                                   | 11 ++++++-
 src/plugins/renderers/drm/plugin.c           | 34 ++++++++++++++++++++
 7 files changed, 71 insertions(+), 1 deletion(-)

diff --git a/src/libply-splash-core/ply-device-manager.c b/src/libply-splash-core/ply-device-manager.c
index aed7bac2..1acb5cc0 100644
--- a/src/libply-splash-core/ply-device-manager.c
+++ b/src/libply-splash-core/ply-device-manager.c
@@ -1122,6 +1122,23 @@ ply_device_manager_deactivate_renderers (ply_device_manager_t *manager)
         manager->renderers_activated = false;
 }
 
+static void
+retain_splash (char *device_path,
+               ply_renderer_t *renderer,
+               ply_device_manager_t *manager)
+{
+        ply_renderer_retain(renderer);
+}
+
+void
+ply_device_manager_retain_splash (ply_device_manager_t *manager)
+{
+        ply_hashtable_foreach (manager->renderers,
+                               (ply_hashtable_foreach_func_t *)
+                               retain_splash,
+                               manager);
+}
+
 void
 ply_device_manager_activate_keyboards (ply_device_manager_t *manager)
 {
diff --git a/src/libply-splash-core/ply-device-manager.h b/src/libply-splash-core/ply-device-manager.h
index 389b636f..bf2bf4eb 100644
--- a/src/libply-splash-core/ply-device-manager.h
+++ b/src/libply-splash-core/ply-device-manager.h
@@ -67,6 +67,7 @@ void ply_device_manager_activate_keyboards (ply_device_manager_t *manager);
 void ply_device_manager_deactivate_keyboards (ply_device_manager_t *manager);
 void ply_device_manager_activate_renderers (ply_device_manager_t *manager);
 void ply_device_manager_deactivate_renderers (ply_device_manager_t *manager);
+void ply_device_manager_retain_splash (ply_device_manager_t *manager);
 ply_terminal_t *ply_device_manager_get_default_terminal (ply_device_manager_t *manager);
 
 #endif
diff --git a/src/libply-splash-core/ply-renderer-plugin.h b/src/libply-splash-core/ply-renderer-plugin.h
index 367d922f..a3cbd4a3 100644
--- a/src/libply-splash-core/ply-renderer-plugin.h
+++ b/src/libply-splash-core/ply-renderer-plugin.h
@@ -76,6 +76,7 @@ typedef struct
                                      int                         *scale);
         bool (*get_capslock_state)(ply_renderer_backend_t *backend);
         const char * (*get_keymap)(ply_renderer_backend_t *backend);
+        void (*retain)(ply_renderer_backend_t *backend);
 } ply_renderer_plugin_interface_t;
 
 #endif /* PLY_RENDERER_PLUGIN_H */
diff --git a/src/libply-splash-core/ply-renderer.c b/src/libply-splash-core/ply-renderer.c
index 3462bfe2..77625b0d 100644
--- a/src/libply-splash-core/ply-renderer.c
+++ b/src/libply-splash-core/ply-renderer.c
@@ -297,6 +297,13 @@ ply_renderer_close (ply_renderer_t *renderer)
         renderer->is_active = false;
 }
 
+void
+ply_renderer_retain (ply_renderer_t *renderer)
+{
+    if (renderer->plugin_interface->retain)
+        renderer->plugin_interface->retain(renderer->backend);
+}
+
 bool
 ply_renderer_handle_change_event (ply_renderer_t *renderer)
 {
diff --git a/src/libply-splash-core/ply-renderer.h b/src/libply-splash-core/ply-renderer.h
index ed2db34c..11fa9b62 100644
--- a/src/libply-splash-core/ply-renderer.h
+++ b/src/libply-splash-core/ply-renderer.h
@@ -55,6 +55,7 @@ ply_renderer_t *ply_renderer_new (ply_renderer_type_t renderer_type,
 void ply_renderer_free (ply_renderer_t *renderer);
 bool ply_renderer_open (ply_renderer_t *renderer);
 void ply_renderer_close (ply_renderer_t *renderer);
+void ply_renderer_retain (ply_renderer_t *renderer);
 /* Returns true when the heads have changed as a result of the change event */
 bool ply_renderer_handle_change_event (ply_renderer_t *renderer);
 void ply_renderer_activate (ply_renderer_t *renderer);
diff --git a/src/main.c b/src/main.c
index 1cb8f6c0..83e39700 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1163,6 +1163,12 @@ hide_splash (state_t *state)
                 ply_terminal_set_mode (state->local_console_terminal, PLY_TERMINAL_MODE_TEXT);
 }
 
+static void
+retain_splash(state_t *state)
+{
+        ply_device_manager_retain_splash (state->device_manager);
+}
+
 static void
 dump_details_and_quit_splash (state_t *state)
 {
@@ -1255,7 +1261,10 @@ on_boot_splash_idle (state_t *state)
          * quit command, the quit command takes precedence.
          */
         if (state->quit_trigger != NULL) {
-                if (!state->should_retain_splash) {
+                if (state->should_retain_splash) {
+                        ply_trace ("retaining splash");
+                        retain_splash (state);
+                } else {
                         ply_trace ("hiding splash");
                         hide_splash (state);
                 }
diff --git a/src/plugins/renderers/drm/plugin.c b/src/plugins/renderers/drm/plugin.c
index 02e9413a..628e6763 100644
--- a/src/plugins/renderers/drm/plugin.c
+++ b/src/plugins/renderers/drm/plugin.c
@@ -758,6 +758,24 @@ ply_renderer_head_unmap (ply_renderer_backend_t *backend,
         head->scan_out_buffer_id = 0;
 }
 
+static void
+ply_renderer_head_retain (ply_renderer_backend_t *backend,
+                          ply_renderer_head_t *head)
+{
+        int ret;
+
+        ply_renderer_buffer_t *buffer;
+
+        buffer = ply_hashtable_lookup (backend->output_buffers,
+                                       (void *) (uintptr_t) head->scan_out_buffer_id);
+        assert (buffer != NULL);
+
+        ply_trace("Closing FB %u (retaining)", buffer->id);
+        ret = drmModeCloseFB (backend->device_fd, buffer->id);
+        if (ret)
+                ply_trace("Could not close FB %u: %m. Attempting rm", buffer->id);
+}
+
 static void
 ply_renderer_head_remove (ply_renderer_backend_t *backend,
                           ply_renderer_head_t    *head)
@@ -1616,6 +1634,21 @@ unmap_from_device (ply_renderer_backend_t *backend)
         }
 }
 
+static void
+retain (ply_renderer_backend_t *backend)
+{
+        ply_renderer_head_t *head;
+        ply_list_node_t *node;
+
+        node = ply_list_get_first_node (backend->heads);
+        while (node != NULL) {
+                head = (ply_renderer_head_t *) ply_list_node_get_data (node);
+                ply_renderer_head_retain (backend, head);
+                node = ply_list_get_next_node (backend->heads, node);
+        }
+}
+
+
 static bool
 reset_scan_out_buffer_if_needed (ply_renderer_backend_t *backend,
                                  ply_renderer_head_t    *head)
@@ -1863,6 +1896,7 @@ ply_renderer_backend_get_interface (void)
                 .get_panel_properties         = get_panel_properties,
                 .get_capslock_state           = get_capslock_state,
                 .get_keymap                   = get_keymap,
+                .retain                       = retain,
         };
 
         return &plugin_interface;
-- 
2.47.1

