From b2ec1cf7e2b381fb6dba1d63cdbc10d6c9c71339 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 20:43:30 -0500
Subject: [PATCH 01/13] trivial: fix --json mode for fwupdtool get-updates

---
 src/fu-tool.c | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index a0c484cf7..54f71d37b 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -626,6 +626,49 @@ fu_util_get_device(FuUtilPrivate *priv, const gchar *id, GError **error)
 	return fu_engine_get_device(priv->engine, id, error);
 }
 
+static gboolean
+fu_util_get_updates_as_json(FuUtilPrivate *priv, GPtrArray *devices, GError **error)
+{
+	g_autoptr(JsonBuilder) builder = json_builder_new();
+	json_builder_begin_object(builder);
+	json_builder_set_member_name(builder, "Devices");
+	json_builder_begin_array(builder);
+	for (guint i = 0; i < devices->len; i++) {
+		FwupdDevice *dev = g_ptr_array_index(devices, i);
+		g_autoptr(GPtrArray) rels = NULL;
+		g_autoptr(GError) error_local = NULL;
+
+		if (!fwupd_device_has_flag(dev, FWUPD_DEVICE_FLAG_SUPPORTED))
+			continue;
+
+		/* get the releases for this device and filter for validity */
+		rels = fu_engine_get_upgrades(priv->engine,
+					      priv->request,
+					      fwupd_device_get_id(dev),
+					      &error_local);
+		if (rels == NULL) {
+			g_debug("no upgrades: %s", error_local->message);
+			continue;
+		}
+		for (guint j = 0; j < rels->len; j++) {
+			FwupdRelease *rel = g_ptr_array_index(rels, j);
+			if (!fwupd_release_match_flags(rel,
+						       priv->filter_release_include,
+						       priv->filter_release_exclude))
+				continue;
+			fwupd_device_add_release(dev, rel);
+		}
+
+		/* add to builder */
+		json_builder_begin_object(builder);
+		fwupd_codec_to_json(FWUPD_CODEC(dev), builder, FWUPD_CODEC_FLAG_TRUSTED);
+		json_builder_end_object(builder);
+	}
+	json_builder_end_array(builder);
+	json_builder_end_object(builder);
+	return fu_util_print_builder(priv->console, builder, error);
+}
+
 static gboolean
 fu_util_get_updates(FuUtilPrivate *priv, gchar **values, GError **error)
 {
@@ -662,6 +705,10 @@ fu_util_get_updates(FuUtilPrivate *priv, gchar **values, GError **error)
 		return FALSE;
 	}
 
+	/* not for human consumption */
+	if (priv->as_json)
+		return fu_util_get_updates_as_json(priv, devices, error);
+
 	fwupd_device_array_ensure_parents(devices);
 	g_ptr_array_sort(devices, fu_util_sort_devices_by_flags_cb);
 	for (guint i = 0; i < devices->len; i++) {
-- 
2.43.0


From 8e99e35067cb363d2ff896a5c12967c2a8bd6f26 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 20:50:09 -0500
Subject: [PATCH 02/13] fu-util: add --json mode for refresh command

---
 src/fu-util.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/src/fu-util.c b/src/fu-util.c
index aedc1affb..91d7c8598 100644
--- a/src/fu-util.c
+++ b/src/fu-util.c
@@ -2242,10 +2242,11 @@ fu_util_download_metadata(FuUtilPrivate *priv, GError **error)
 				(guint)fwupd_remote_get_age(remote));
 			continue;
 		}
-		fu_console_print(priv->console,
-				 "%s %s",
-				 _("Updating"),
-				 fwupd_remote_get_id(remote));
+		if (!priv->as_json)
+			fu_console_print(priv->console,
+					 "%s %s",
+					 _("Updating"),
+					 fwupd_remote_get_id(remote));
 		if (!fwupd_client_refresh_remote(priv->client,
 						 remote,
 						 priv->download_flags,
@@ -2279,6 +2280,9 @@ fu_util_download_metadata(FuUtilPrivate *priv, GError **error)
 		return FALSE;
 	}
 
+	if (priv->as_json)
+		return TRUE;
+
 	/* get devices from daemon */
 	devs = fwupd_client_get_devices(priv->client, priv->cancellable, error);
 	if (devs == NULL)
@@ -2341,6 +2345,9 @@ fu_util_refresh(FuUtilPrivate *priv, gchar **values, GError **error)
 					  error))
 		return FALSE;
 
+	if (priv->as_json)
+		return TRUE;
+
 	/* TRANSLATORS: success message -- the user can do this by-hand too */
 	fu_console_print_literal(priv->console, _("Successfully refreshed metadata manually"));
 	return TRUE;
-- 
2.43.0


From d75375e39be8ce20acfa8e86910958ae60a10156 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 20:54:05 -0500
Subject: [PATCH 03/13] trivial: don't show messages for fwupdmgr update --json

---
 src/fu-util.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/src/fu-util.c b/src/fu-util.c
index 91d7c8598..429bb0efa 100644
--- a/src/fu-util.c
+++ b/src/fu-util.c
@@ -690,6 +690,9 @@ fu_util_download_if_required(FuUtilPrivate *priv, const gchar *perhapsfn, GError
 static void
 fu_util_display_current_message(FuUtilPrivate *priv)
 {
+	if (priv->as_json)
+		return;
+
 	/* TRANSLATORS: success message */
 	fu_console_print_literal(priv->console, _("Successfully installed firmware"));
 
@@ -2998,7 +3001,7 @@ fu_util_update_device_with_release(FuUtilPrivate *priv,
 			    fwupd_device_get_update_error(dev));
 		return FALSE;
 	}
-	if (!priv->no_safety_check && !priv->assume_yes) {
+	if (!priv->as_json && !priv->no_safety_check && !priv->assume_yes) {
 		const gchar *title = fwupd_client_get_host_product(priv->client);
 		if (!fu_util_prompt_warning(priv->console, dev, rel, title, error))
 			return FALSE;
-- 
2.43.0


From 6e703f3091a6077e567a6e362f6a52df948faf29 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 20:55:13 -0500
Subject: [PATCH 04/13] trivial: fu-tool: don't show current message when
 updating with --json

---
 src/fu-tool.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index 54f71d37b..c3ac803b3 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -1023,6 +1023,9 @@ fu_util_update_device_changed_cb(FwupdClient *client, FwupdDevice *device, FuUti
 static void
 fu_util_display_current_message(FuUtilPrivate *priv)
 {
+	if (priv->as_json)
+		return;
+
 	/* print all POST requests */
 	for (guint i = 0; i < priv->post_requests->len; i++) {
 		FwupdRequest *request = g_ptr_array_index(priv->post_requests, i);
-- 
2.43.0


From 3ae532694363df5c198b51330826e87b23a8fa3a Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 22:08:18 -0500
Subject: [PATCH 05/13] trivial: cover --as-json for fu_util_activate

---
 src/fu-util.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/fu-util.c b/src/fu-util.c
index 429bb0efa..8f2501cd9 100644
--- a/src/fu-util.c
+++ b/src/fu-util.c
@@ -3761,6 +3761,9 @@ fu_util_activate(FuUtilPrivate *priv, gchar **values, GError **error)
 			return FALSE;
 	}
 
+	if (priv->as_json)
+		return TRUE;
+
 	/* TRANSLATORS: success message -- where activation is making the new
 	 * firmware take effect, usually after updating offline */
 	fu_console_print_literal(priv->console, _("Successfully activated all devices"));
-- 
2.43.0


From b33a3a180ead860fa553b1ac0249cbe25c914be2 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 22:08:37 -0500
Subject: [PATCH 06/13] trivial: cover --json for fu_util_remote_modify

---
 src/fu-util.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/fu-util.c b/src/fu-util.c
index 8f2501cd9..07a8b433a 100644
--- a/src/fu-util.c
+++ b/src/fu-util.c
@@ -3266,6 +3266,9 @@ fu_util_remote_modify(FuUtilPrivate *priv, gchar **values, GError **error)
 					error))
 		return FALSE;
 
+	if (priv->as_json)
+		return TRUE;
+
 	/* TRANSLATORS: success message for a per-remote setting change */
 	fu_console_print_literal(priv->console, _("Successfully modified remote"));
 	return TRUE;
-- 
2.43.0


From e933793a64ae37ba8881456a1647ea91c034e9f5 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 22:08:56 -0500
Subject: [PATCH 07/13] trivial: fix --json for security commands

---
 src/fu-util.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/fu-util.c b/src/fu-util.c
index 07a8b433a..ce9a09964 100644
--- a/src/fu-util.c
+++ b/src/fu-util.c
@@ -4818,6 +4818,10 @@ fu_util_security_fix(FuUtilPrivate *priv, gchar **values, GError **error)
 	}
 	if (!fwupd_client_fix_host_security_attr(priv->client, values[0], priv->cancellable, error))
 		return FALSE;
+
+	if (priv->as_json)
+		return TRUE;
+
 	/* TRANSLATORS: we've fixed a security problem on the machine */
 	fu_console_print_literal(priv->console, _("Fixed successfully"));
 	return TRUE;
@@ -4932,6 +4936,10 @@ fu_util_security_undo(FuUtilPrivate *priv, gchar **values, GError **error)
 						  priv->cancellable,
 						  error))
 		return FALSE;
+
+	if (priv->as_json)
+		return TRUE;
+
 	/* TRANSLATORS: we've fixed a security problem on the machine */
 	fu_console_print_literal(priv->console, _("Fix reverted successfully"));
 	return TRUE;
-- 
2.43.0


From 9af637bcb4f5f6461c6209b8c35a7d42226ab3ec Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 22:10:26 -0500
Subject: [PATCH 08/13] trivial: fix --json for disable test devices

---
 src/fu-tool.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index c3ac803b3..b6c48c689 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -2327,6 +2327,9 @@ fu_util_disable_test_devices(FuUtilPrivate *priv, gchar **values, GError **error
 	if (!fu_util_set_test_devices_enabled(priv, FALSE, error))
 		return FALSE;
 
+	if (priv->as_json)
+		return TRUE;
+
 	/* TRANSLATORS: comment explaining result of command */
 	fu_console_print_literal(priv->console, _("Successfully disabled test devices"));
 
-- 
2.43.0


From 3bfc59b76fc502b43b0e1595a312815172ba2f02 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 22:10:41 -0500
Subject: [PATCH 09/13] trivial: fix --json for fwupdtool modify-remote

---
 src/fu-tool.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index b6c48c689..39f19afaf 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -2193,6 +2193,9 @@ fu_util_remote_modify(FuUtilPrivate *priv, gchar **values, GError **error)
 				     error))
 		return FALSE;
 
+	if (priv->as_json)
+		return TRUE;
+
 	fu_console_print_literal(priv->console, _("Successfully modified remote"));
 	return TRUE;
 }
-- 
2.43.0


From 0b7e8bdd0f49037c4806d832c26d778f7b3b5149 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 15 May 2025 22:12:57 -0500
Subject: [PATCH 10/13] trivial: fix --json for fwupdtool activate

---
 src/fu-tool.c | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index 39f19afaf..c4ba0d350 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -2472,12 +2472,14 @@ fu_util_activate(FuUtilPrivate *priv, gchar **values, GError **error)
 		if (!fu_device_has_flag(device, FWUPD_DEVICE_FLAG_NEEDS_ACTIVATION))
 			continue;
 		has_pending = TRUE;
-		fu_console_print(
-		    priv->console,
-		    "%s %s…",
-		    /* TRANSLATORS: shown when shutting down to switch to the new version */
-		    _("Activating firmware update"),
-		    fu_device_get_name(device));
+		if (!priv->as_json) {
+			fu_console_print(
+			    priv->console,
+			    "%s %s…",
+			    /* TRANSLATORS: shown when shutting down to switch to the new version */
+			    _("Activating firmware update"),
+			    fu_device_get_name(device));
+		}
 		if (!fu_engine_activate(priv->engine,
 					fu_device_get_id(device),
 					fu_progress_get_child(priv->progress),
-- 
2.43.0


From d1219f613ed89fb5197c9cc1c4ba3fa745906765 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Fri, 16 May 2025 10:29:44 +0100
Subject: [PATCH 11/13] trivial: Include the missing plugin name when using
 fwuptool get-report-metadata

---
 src/fu-tool.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index c4ba0d350..10414c55a 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -2095,6 +2095,7 @@ fu_util_get_report_metadata(FuUtilPrivate *priv, gchar **values, GError **error)
 			continue;
 		if (fu_plugin_get_report_metadata(plugin) == NULL)
 			continue;
+		fwupd_codec_string_append(str, 1, fu_plugin_get_name(plugin), "");
 		fu_util_report_metadata_to_string(fu_plugin_get_report_metadata(plugin), 3, str);
 	}
 	fu_progress_step_done(priv->progress);
-- 
2.43.0


From f9ce76ee81c3003cebb53784a8f1edd9b52b6e1e Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Fri, 16 May 2025 10:30:21 +0100
Subject: [PATCH 12/13] trivial: Add fwupd_codec_json_append_map:() for future
 use

---
 libfwupd/fwupd-codec.c | 32 ++++++++++++++++++++++++++++++++
 libfwupd/fwupd-codec.h |  3 +++
 libfwupd/fwupd.map     |  6 ++++++
 3 files changed, 41 insertions(+)

diff --git a/libfwupd/fwupd-codec.c b/libfwupd/fwupd-codec.c
index 8afb30339..fb10aaeb1 100644
--- a/libfwupd/fwupd-codec.c
+++ b/libfwupd/fwupd-codec.c
@@ -717,3 +717,35 @@ fwupd_codec_json_append_strv(JsonBuilder *builder, const gchar *key, gchar **val
 		json_builder_add_string_value(builder, value[i]);
 	json_builder_end_array(builder);
 }
+
+/**
+ * fwupd_codec_json_append_map:
+ * @builder: (not nullable): a #JsonBuilder
+ * @key: (not nullable): a string
+ * @value: (element-type utf8 utf8): a hash table
+ *
+ * Appends a key and string hash map to a JSON builder.
+ *
+ * Since: 2.0.10
+ */
+void
+fwupd_codec_json_append_map(JsonBuilder *builder, const gchar *key, GHashTable *value)
+{
+	GHashTableIter iter;
+	gpointer hash_key, hash_value;
+
+	g_return_if_fail(JSON_IS_BUILDER(builder));
+	g_return_if_fail(key != NULL);
+
+	if (value == NULL)
+		return;
+	json_builder_set_member_name(builder, key);
+	json_builder_begin_object(builder);
+	g_hash_table_iter_init(&iter, value);
+	while (g_hash_table_iter_next(&iter, &hash_key, &hash_value)) {
+		fwupd_codec_json_append(builder,
+					(const gchar *)hash_key,
+					(const gchar *)hash_value);
+	}
+	json_builder_end_object(builder);
+}
diff --git a/libfwupd/fwupd-codec.h b/libfwupd/fwupd-codec.h
index ddbf63eeb..402b2b753 100644
--- a/libfwupd/fwupd-codec.h
+++ b/libfwupd/fwupd-codec.h
@@ -123,6 +123,9 @@ void
 fwupd_codec_json_append_strv(JsonBuilder *builder, const gchar *key, gchar **value)
     G_GNUC_NON_NULL(1, 2);
 void
+fwupd_codec_json_append_map(JsonBuilder *builder, const gchar *key, GHashTable *value)
+    G_GNUC_NON_NULL(1, 2);
+void
 fwupd_codec_json_append_int(JsonBuilder *builder, const gchar *key, guint64 value)
     G_GNUC_NON_NULL(1, 2);
 void
diff --git a/libfwupd/fwupd.map b/libfwupd/fwupd.map
index 38d08813a..10655d276 100644
--- a/libfwupd/fwupd.map
+++ b/libfwupd/fwupd.map
@@ -1015,3 +1015,9 @@ LIBFWUPD_2.0.7 {
     fwupd_security_attr_set_fwupd_version;
   local: *;
 } LIBFWUPD_2.0.4;
+
+LIBFWUPD_2.0.10 {
+  global:
+    fwupd_codec_json_append_map;
+  local: *;
+} LIBFWUPD_2.0.7;
-- 
2.43.0


From fbe1660398eb5451f9ac73ebee871b674319a0d4 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Fri, 16 May 2025 10:31:07 +0100
Subject: [PATCH 13/13] trivial: Add --json support to fwupdtool
 get-report-metadata

e.g. like this

	# fwupdtool get-report-metadata --plugins uefi_capsule --json
	{
	  "daemon" : {
	    "CompileVersion(org.freedesktop.fwupd)" : "2.0.9",
	    ...
	    "RuntimeVersion(org.freedesktop.fwupd)" : "2.0.9"
	  },
	  "devices" : [
	    {
	      "ac80811c9b070b1a02475f04728f79d8a34ddd66" : [
		{
		  "pre" : {
		    "MissingCapsuleHeader" : "False",
		    "EspKind" : "c12a7328-f81f-11d2-ba4b-00a0c93ec93b",
		    "CapsuleApplyMethod" : "cod",
		    "EspPath" : "/boot/efi"
		  }
		},
		{
		  "post" : {
		    "LastAttemptStatus" : "0x0",
		    "LastAttemptVersion" : "0x2801"
		  }
		}
	      ]
	    }
	  ],
	  "plugins" : [
	    {
	      "uefi_capsule" : {
		"EfivarsNvramUsed" : "110231",
		"SecureBoot" : "Disabled",
		"UEFIUXCapsule" : "Enabled"
	      }
	    }
	  ]
	}
---
 src/fu-tool.c | 83 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 83 insertions(+)

diff --git a/src/fu-tool.c b/src/fu-tool.c
index 10414c55a..9ca6a2818 100644
--- a/src/fu-tool.c
+++ b/src/fu-tool.c
@@ -2029,6 +2029,79 @@ fu_util_report_metadata_to_string(GHashTable *metadata, guint idt, GString *str)
 	}
 }
 
+static gboolean
+fu_util_get_report_metadata_as_json(FuUtilPrivate *priv, JsonBuilder *builder, GError **error)
+{
+	GPtrArray *plugins;
+	g_autoptr(GHashTable) metadata = NULL;
+	g_autoptr(GPtrArray) devices = NULL;
+
+	/* daemon metadata */
+	metadata = fu_engine_get_report_metadata(priv->engine, error);
+	if (metadata == NULL)
+		return FALSE;
+	fwupd_codec_json_append_map(builder, "daemon", metadata);
+
+	/* device metadata */
+	devices = fu_engine_get_devices(priv->engine, error);
+	if (devices == NULL)
+		return FALSE;
+	json_builder_set_member_name(builder, "devices");
+	json_builder_begin_array(builder);
+	for (guint i = 0; i < devices->len; i++) {
+		FuDevice *device = g_ptr_array_index(devices, i);
+		g_autoptr(FuDeviceLocker) locker = NULL;
+		g_autoptr(GHashTable) metadata_post = NULL;
+		g_autoptr(GHashTable) metadata_pre = NULL;
+
+		locker = fu_device_locker_new(device, error);
+		if (locker == NULL)
+			return FALSE;
+		metadata_pre = fu_device_report_metadata_pre(device);
+		metadata_post = fu_device_report_metadata_post(device);
+		if (metadata_pre == NULL && metadata_post == NULL)
+			continue;
+
+		json_builder_begin_object(builder);
+		json_builder_set_member_name(builder, fu_device_get_id(device));
+		json_builder_begin_array(builder);
+		if (metadata_pre != NULL) {
+			json_builder_begin_object(builder);
+			fwupd_codec_json_append_map(builder, "pre", metadata_pre);
+			json_builder_end_object(builder);
+		}
+		if (metadata_post != NULL) {
+			json_builder_begin_object(builder);
+			fwupd_codec_json_append_map(builder, "post", metadata_post);
+			json_builder_end_object(builder);
+		}
+		json_builder_end_array(builder);
+		json_builder_end_object(builder);
+	}
+	json_builder_end_array(builder);
+
+	/* plugin metadata */
+	plugins = fu_engine_get_plugins(priv->engine);
+	json_builder_set_member_name(builder, "plugins");
+	json_builder_begin_array(builder);
+	for (guint i = 0; i < plugins->len; i++) {
+		FuPlugin *plugin = g_ptr_array_index(plugins, i);
+		if (fu_plugin_has_flag(plugin, FWUPD_PLUGIN_FLAG_DISABLED))
+			continue;
+		if (fu_plugin_get_report_metadata(plugin) == NULL)
+			continue;
+		json_builder_begin_object(builder);
+		fwupd_codec_json_append_map(builder,
+					    fu_plugin_get_name(plugin),
+					    fu_plugin_get_report_metadata(plugin));
+		json_builder_end_object(builder);
+	}
+	json_builder_end_array(builder);
+
+	/* success */
+	return TRUE;
+}
+
 static gboolean
 fu_util_get_report_metadata(FuUtilPrivate *priv, gchar **values, GError **error)
 {
@@ -2050,6 +2123,16 @@ fu_util_get_report_metadata(FuUtilPrivate *priv, gchar **values, GError **error)
 		return FALSE;
 	fu_progress_step_done(priv->progress);
 
+	/* not for human consumption */
+	if (priv->as_json) {
+		g_autoptr(JsonBuilder) builder = json_builder_new();
+		json_builder_begin_object(builder);
+		if (!fu_util_get_report_metadata_as_json(priv, builder, error))
+			return FALSE;
+		json_builder_end_object(builder);
+		return fu_util_print_builder(priv->console, builder, error);
+	}
+
 	/* daemon metadata */
 	metadata = fu_engine_get_report_metadata(priv->engine, error);
 	if (metadata == NULL)
-- 
2.43.0

